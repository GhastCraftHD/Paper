From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <lynxplay101@gmail.com>
Date: Thu, 13 Jun 2024 23:45:32 +0200
Subject: [PATCH] Add registry entry and builders


diff --git a/src/main/java/io/papermc/paper/registry/PaperRegistries.java b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
index 9342f034ef590594db046cd9b0810bd4075d8e6b..91f4e3b3172dcef1c4093e924405e88ad396d471 100644
--- a/src/main/java/io/papermc/paper/registry/PaperRegistries.java
+++ b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
@@ -1,5 +1,7 @@
 package io.papermc.paper.registry;
 
+import io.papermc.paper.registry.data.PaperEnchantmentRegistryEntryBuilder;
+import io.papermc.paper.registry.data.PaperGameEventRegistryEntryBuilder;
 import io.papermc.paper.registry.entry.RegistryEntry;
 import java.util.Collections;
 import java.util.IdentityHashMap;
@@ -59,8 +61,8 @@ public final class PaperRegistries {
     static {
         REGISTRY_ENTRIES = List.of(
             // built-ins
-            entry(Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT, Enchantment.class, CraftEnchantment::new).withSerializationUpdater(FieldRename.ENCHANTMENT_RENAME),
-            entry(Registries.GAME_EVENT, RegistryKey.GAME_EVENT, GameEvent.class, CraftGameEvent::new),
+            writable(Registries.ENCHANTMENT, RegistryKey.ENCHANTMENT, Enchantment.class, CraftEnchantment::new, PaperEnchantmentRegistryEntryBuilder::new).withSerializationUpdater(FieldRename.ENCHANTMENT_RENAME),
+            writable(Registries.GAME_EVENT, RegistryKey.GAME_EVENT, GameEvent.class, CraftGameEvent::new, PaperGameEventRegistryEntryBuilder::new),
             entry(Registries.INSTRUMENT, RegistryKey.INSTRUMENT, MusicInstrument.class, CraftMusicInstrument::new),
             entry(Registries.MOB_EFFECT, RegistryKey.MOB_EFFECT, PotionEffectType.class, CraftPotionEffectType::new),
             entry(Registries.STRUCTURE_TYPE, RegistryKey.STRUCTURE_TYPE, StructureType.class, CraftStructureType::new),
diff --git a/src/main/java/io/papermc/paper/registry/data/PaperEnchantmentRegistryEntryBuilder.java b/src/main/java/io/papermc/paper/registry/data/PaperEnchantmentRegistryEntryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..37f6f3c74dc1e001621ddbde5bde73d1f1a86d2d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/data/PaperEnchantmentRegistryEntryBuilder.java
@@ -0,0 +1,53 @@
+package io.papermc.paper.registry.data;
+
+import io.papermc.paper.registry.PaperRegistryBuilder;
+import io.papermc.paper.registry.TypedKey;
+import io.papermc.paper.registry.set.RegistrySet;
+import net.kyori.adventure.text.Component;
+import net.minecraft.world.item.enchantment.Enchantment;
+import org.bukkit.inventory.ItemType;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
+
+public class PaperEnchantmentRegistryEntryBuilder implements EnchantmentRegistryEntry.Builder,
+    PaperRegistryBuilder<Enchantment, org.bukkit.enchantments.Enchantment> {
+
+    // Top level
+    private Component description;
+
+    // Definition
+    private RegistrySet<ItemType> supportedItems;
+
+    public PaperEnchantmentRegistryEntryBuilder(@NonNull TypedKey<org.bukkit.enchantments.Enchantment> $, @Nullable Enchantment internal) {
+        if (internal == null) return;
+
+        this.description = Component.translatable(internal.getDescriptionId());
+    }
+
+    @Override
+    public @NonNull Component description() {
+        return this.description;
+    }
+
+    @Override
+    public @NonNull Builder description(@NonNull final Component description) {
+        this.description = description;
+        return this;
+    }
+
+    @Override
+    public @NonNull RegistrySet<ItemType> supportedItems() {
+        return this.supportedItems;
+    }
+
+    @Override
+    public @NonNull Builder supportedItems(@NonNull final RegistrySet<ItemType> supportedItems) {
+        this.supportedItems = supportedItems;
+        return this;
+    }
+
+    @Override
+    public Enchantment build() {
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/data/PaperGameEventRegistryEntryBuilder.java b/src/main/java/io/papermc/paper/registry/data/PaperGameEventRegistryEntryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..994493dd608966d739cb4324f7d4a8485addad43
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/data/PaperGameEventRegistryEntryBuilder.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.registry.data;
+
+import io.papermc.paper.registry.PaperRegistryBuilder;
+import net.minecraft.world.level.gameevent.GameEvent;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.jetbrains.annotations.Range;
+
+public final class PaperGameEventRegistryEntryBuilder implements GameEventRegistryEntry.Builder,
+    PaperRegistryBuilder<GameEvent, org.bukkit.GameEvent> {
+
+    private int range;
+
+    public PaperGameEventRegistryEntryBuilder(
+        final io.papermc.paper.registry.TypedKey<org.bukkit.GameEvent> $,
+        final @Nullable GameEvent nms
+    ) {
+        if (nms == null) return;
+
+        this.range = nms.notificationRadius();
+    }
+
+    @Override
+    public @Range(from = 0, to = Integer.MAX_VALUE) int range() {
+        return this.range;
+    }
+
+    @Override
+    public GameEventRegistryEntry.@NonNull Builder range(@Range(from = 0, to = Integer.MAX_VALUE) final int range) {
+        this.range = range;
+        return this;
+    }
+
+    @Override
+    public GameEvent build() {
+        return new GameEvent(this.range);
+    }
+}
